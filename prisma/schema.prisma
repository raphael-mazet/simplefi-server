generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Field {
  fieldId                                   String            @id @map("field_id")
  name                                      String?           @unique
  protocolId                                String?           @map("protocol_id")
  fieldDescription                          Json?             @map("field_description")
  instructions                              Json?
  riskLevel                                 Int?              @map("risk_level")
  receiptToken                              String?           @unique @map("receipt_token")
  isEarning                                 Boolean?          @map("is_earning")
  protocol                                  Protocol?         @relation(fields: [protocolId], references: [protocolId])
  token_field_receipt_tokenTotoken          Token?            @relation("field_receipt_tokenTotoken", fields: [receiptToken], references: [tokenId])
  contractAddresses                         contractAddress[] @relation("contract_addressTofield")
  cropTokens                                FieldCrop[]       @relation("fieldTofieldCrop")
  seedTokens                                FieldSeed[]       @relation("fieldTofieldSeed")
  secondaryFields                           secondaryField[]  @relation("fieldTosecondary_field_primary_field_id")
  fieldTosecondary_field_secondary_field_id secondaryField[]  @relation("fieldTosecondary_field_secondary_field_id")

  @@map("field")
}

model Protocol {
  protocolId                             String  @id @map("protocol_id")
  name                                   String? @unique
  governanceToken                        String? @map("governance_token")
  links                                  Json?
  token_protocol_governance_tokenTotoken Token?  @relation("protocol_governance_tokenTotoken", fields: [governanceToken], references: [tokenId])
  fields                                 Field[]
  token_protocolTotoken_protocol_id      Token[] @relation("protocolTotoken_protocol_id")

  @@map("protocol")
}

model Token {
  tokenId                                   String             @id @map("token_id")
  protocolId                                String?            @map("protocol_id")
  name                                      String             @unique
  priceApi                                  String?            @map("price_api")
  address                                   String?
  isBase                                    Boolean            @map("is_base")
  contractInterfaceId                       String?            @map("contract_interface")
  decimals                                  Int
  contractInterface                         ContractInterface? @relation("contract_interfaceTotoken", fields: [contractInterfaceId], references: [ciId])
  protocol                                  Protocol?          @relation("protocolTotoken_protocol_id", fields: [protocolId], references: [protocolId])
  field_field_receipt_tokenTotoken          Field?             @relation("field_receipt_tokenTotoken")
  fieldCrop                                 FieldCrop[]        @relation("fieldCropTotoken")
  fieldSeed                                 FieldSeed[]        @relation("fieldSeedTotoken")
  protocol_protocol_governance_tokenTotoken Protocol[]         @relation("protocol_governance_tokenTotoken")

  @@map("token")
}

model FieldCrop {
  tokenId                String  @map("token_id")
  fieldId                String  @map("field_id")
  unclaimedBalanceMethod String? @map("unclaimed_balance_method")
  field                  Field   @relation("fieldTofieldCrop", fields: [fieldId], references: [fieldId])
  token                  Token   @relation("fieldCropTotoken", fields: [tokenId], references: [tokenId])

  @@id([tokenId, fieldId])
  @@map("field_crop")
}

model FieldSeed {
  tokenId   String @map("token_id")
  fieldId   String @map("field_id")
  seedIndex Int?   @map("seed_index")
  field     Field  @relation("fieldTofieldSeed", fields: [fieldId], references: [fieldId])
  token     Token  @relation("fieldSeedTotoken", fields: [tokenId], references: [tokenId])

  @@id([tokenId, fieldId])
  @@map("field_seed")
}

model ContractInterface {
  ciId            String            @id @map("ci_id")
  name            String            @unique
  abi             Json
  isErc           Boolean?          @map("is_erc")
  contractAddress contractAddress[] @relation("contract_addressTocontract_interface")
  token           Token[]           @relation("contract_interfaceTotoken")

  @@map("contract_interface")
}

model contractAddress {
  addressId           String            @id @map("address_id")
  fieldId             String            @map("field_id")
  contractInterfaceId String            @map("contract_interface")
  address             String
  addressTypes        address_type[]    @map("address_type")
  decimals            Int?
  contractInterface   ContractInterface @relation("contract_addressTocontract_interface", fields: [contractInterfaceId], references: [ciId])
  field               Field             @relation("contract_addressTofield", fields: [fieldId], references: [fieldId])

  @@map("contract_address")
}

model secondaryField {
  primaryFieldId                                String @map("primary_field_id")
  secondaryFieldId                              String @map("secondary_field_id")
  field_fieldTosecondary_field_primary_field_id Field  @relation("fieldTosecondary_field_primary_field_id", fields: [primaryFieldId], references: [fieldId])
  secondaryField                                Field  @relation("fieldTosecondary_field_secondary_field_id", fields: [secondaryFieldId], references: [fieldId])

  @@id([primaryFieldId, secondaryFieldId])
  @@map("secondary_field")
}

enum transaction_in_output {
  token
  fiat

   @@map("transaction_in/output")
}

enum transaction_type {
  buy
  sell
  farm
  liquidity
  claim
  airdrop
}

enum address_type {
  balance
  underlying
  earning
  deposit
  withdraw
  rewardRate
  rewardWeight
  unclaimedReward
}
